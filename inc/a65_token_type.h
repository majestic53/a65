/**
 * A65
 * Copyright (C) 2018 David Jolly
 *
 * A65 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * A65 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef A65_TOKEN_TYPE_H_
#define A65_TOKEN_TYPE_H_

#include "./a65_define.h"

enum {
	A65_CHARACTER_ESCAPE_ALERT = 0,
	A65_CHARACTER_ESCAPE_BACKSPACE,
	A65_CHARACTER_ESCAPE_BACKSLASH,
	A65_CHARACTER_ESCAPE_CARRAGE_RETURN,
	A65_CHARACTER_ESCAPE_FORMFEED,
	A65_CHARACTER_ESCAPE_HEXIDECIMAL,
	A65_CHARACTER_ESCAPE_NEWLINE,
	A65_CHARACTER_ESCAPE_QUOTE_DOUBLE,
	A65_CHARACTER_ESCAPE_QUOTE_SINGLE,
	A65_CHARACTER_ESCAPE_TAB_HORIZONTAL,
	A65_CHARACTER_ESCAPE_TAB_VERTICAL,
};

#define A65_CHARACTER_ESCAPE_MAX A65_CHARACTER_ESCAPE_TAB_VERTICAL

static const std::string A65_CHARACTER_ESCAPE_STR[] = {
	"\\a", "\\b", "\\\\", "\\r", "\\f", "\\x", "\\n", "\\\"", "\\\'", "\\t", "\\v",
	};

#define A65_CHARACTER_ESCAPE_STRING(_TYPE_) \
	(((_TYPE_) > A65_CHARACTER_ESCAPE_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_CHARACTER_ESCAPE_STR[_TYPE_]))

static const std::map<std::string, int> A65_CHARACTER_ESCAPE_MAP = {
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_ALERT), A65_CHARACTER_ESCAPE_ALERT),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_BACKSPACE), A65_CHARACTER_ESCAPE_BACKSPACE),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_BACKSLASH), A65_CHARACTER_ESCAPE_BACKSLASH),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_CARRAGE_RETURN), A65_CHARACTER_ESCAPE_CARRAGE_RETURN),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_FORMFEED), A65_CHARACTER_ESCAPE_FORMFEED),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_HEXIDECIMAL), A65_CHARACTER_ESCAPE_HEXIDECIMAL),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_NEWLINE), A65_CHARACTER_ESCAPE_NEWLINE),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_QUOTE_DOUBLE), A65_CHARACTER_ESCAPE_QUOTE_DOUBLE),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_QUOTE_SINGLE), A65_CHARACTER_ESCAPE_QUOTE_SINGLE),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_TAB_HORIZONTAL), A65_CHARACTER_ESCAPE_TAB_HORIZONTAL),
	std::make_pair(A65_CHARACTER_ESCAPE_STRING(A65_CHARACTER_ESCAPE_TAB_VERTICAL), A65_CHARACTER_ESCAPE_TAB_VERTICAL),
	};

#define A65_CHARACTER_ESCAPE_ID(_STRING_) \
	A65_CHARACTER_ESCAPE_MAP.find(_STRING_)->second

#define A65_IS_CHARACTER_ESCAPE(_STRING_) \
	(A65_CHARACTER_ESCAPE_MAP.find(_STRING_) != A65_CHARACTER_ESCAPE_MAP.end())

static const char A65_CHARACTER_ESCAPE_VAL[] = {
	'\a', '\b', '\\', '\r', '\f', '\0', '\n', '\"', '\'', '\t', '\v',
	};

#define A65_CHARACTER_ESCAPE_VALUE(_TYPE_) \
	(((_TYPE_) > A65_CHARACTER_ESCAPE_MAX) ? '\0' : \
		A65_CHARACTER_ESCAPE_VAL[_TYPE_])

static const std::map<char, int> A65_CHARACTER_ESCAPE_VALUE_MAP = {
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_ALERT), A65_CHARACTER_ESCAPE_ALERT),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_BACKSPACE), A65_CHARACTER_ESCAPE_BACKSPACE),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_BACKSLASH), A65_CHARACTER_ESCAPE_BACKSLASH),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_CARRAGE_RETURN), A65_CHARACTER_ESCAPE_CARRAGE_RETURN),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_FORMFEED), A65_CHARACTER_ESCAPE_FORMFEED),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_HEXIDECIMAL), A65_CHARACTER_ESCAPE_HEXIDECIMAL),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_NEWLINE), A65_CHARACTER_ESCAPE_NEWLINE),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_QUOTE_DOUBLE), A65_CHARACTER_ESCAPE_QUOTE_DOUBLE),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_QUOTE_SINGLE), A65_CHARACTER_ESCAPE_QUOTE_SINGLE),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_TAB_HORIZONTAL), A65_CHARACTER_ESCAPE_TAB_HORIZONTAL),
	std::make_pair(A65_CHARACTER_ESCAPE_VALUE(A65_CHARACTER_ESCAPE_TAB_VERTICAL), A65_CHARACTER_ESCAPE_TAB_VERTICAL),
	};

#define A65_CHARACTER_ESCAPE_VALUE_ID(_VALUE_) \
	A65_CHARACTER_ESCAPE_VALUE_MAP.find(_VALUE_)->second

#define A65_IS_CHARACTER_ESCAPE_VALUE(_VALUE_) \
	(A65_CHARACTER_ESCAPE_VALUE_MAP.find(_VALUE_) != A65_CHARACTER_ESCAPE_VALUE_MAP.end())

#define A65_TOKEN_MODE_UNDEFINED (-1)
#define A65_TOKEN_SUBTYPE_UNDEFINED (-1)

enum {
	A65_TOKEN_BEGIN = 0,
	A65_TOKEN_COMMAND,
	A65_TOKEN_CONSTANT,
	A65_TOKEN_DIRECTIVE,
	A65_TOKEN_END,
	A65_TOKEN_IDENTIFIER,
	A65_TOKEN_LABEL,
	A65_TOKEN_LITERAL,
	A65_TOKEN_MACRO,
	A65_TOKEN_PRAGMA,
	A65_TOKEN_REGISTER,
	A65_TOKEN_SCALAR,
	A65_TOKEN_SYMBOL,
};

#define A65_TOKEN_MAX A65_TOKEN_SYMBOL

static const std::string A65_TOKEN_STR[] = {
	"Begin", "Command", "Constant", "Directive", "End", "Identifier", "Label", "Literal",
	"Macro", "Pragma", "Register", "Scalar", "Symbol",
	};

#define A65_TOKEN_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_STR[_TYPE_]))

enum {
	A65_TOKEN_COMMAND_ADC = 0,
	A65_TOKEN_COMMAND_AND,
	A65_TOKEN_COMMAND_ASL,
	A65_TOKEN_COMMAND_BBR0,
	A65_TOKEN_COMMAND_BBR1,
	A65_TOKEN_COMMAND_BBR2,
	A65_TOKEN_COMMAND_BBR3,
	A65_TOKEN_COMMAND_BBR4,
	A65_TOKEN_COMMAND_BBR5,
	A65_TOKEN_COMMAND_BBR6,
	A65_TOKEN_COMMAND_BBR7,
	A65_TOKEN_COMMAND_BBS0,
	A65_TOKEN_COMMAND_BBS1,
	A65_TOKEN_COMMAND_BBS2,
	A65_TOKEN_COMMAND_BBS3,
	A65_TOKEN_COMMAND_BBS4,
	A65_TOKEN_COMMAND_BBS5,
	A65_TOKEN_COMMAND_BBS6,
	A65_TOKEN_COMMAND_BBS7,
	A65_TOKEN_COMMAND_BCC,
	A65_TOKEN_COMMAND_BCS,
	A65_TOKEN_COMMAND_BEQ,
	A65_TOKEN_COMMAND_BIT,
	A65_TOKEN_COMMAND_BMI,
	A65_TOKEN_COMMAND_BNE,
	A65_TOKEN_COMMAND_BPL,
	A65_TOKEN_COMMAND_BRA,
	A65_TOKEN_COMMAND_BRK,
	A65_TOKEN_COMMAND_BVC,
	A65_TOKEN_COMMAND_BVS,
	A65_TOKEN_COMMAND_CLC,
	A65_TOKEN_COMMAND_CLD,
	A65_TOKEN_COMMAND_CLI,
	A65_TOKEN_COMMAND_CLV,
	A65_TOKEN_COMMAND_CMD,
	A65_TOKEN_COMMAND_CMP,
	A65_TOKEN_COMMAND_CPX,
	A65_TOKEN_COMMAND_CPY,
	A65_TOKEN_COMMAND_DEC,
	A65_TOKEN_COMMAND_DEX,
	A65_TOKEN_COMMAND_DEY,
	A65_TOKEN_COMMAND_EOR,
	A65_TOKEN_COMMAND_INC,
	A65_TOKEN_COMMAND_INX,
	A65_TOKEN_COMMAND_INY,
	A65_TOKEN_COMMAND_JMP,
	A65_TOKEN_COMMAND_JSR,
	A65_TOKEN_COMMAND_LDA,
	A65_TOKEN_COMMAND_LDX,
	A65_TOKEN_COMMAND_LDY,
	A65_TOKEN_COMMAND_LSR,
	A65_TOKEN_COMMAND_NOP,
	A65_TOKEN_COMMAND_ORA,
	A65_TOKEN_COMMAND_PHA,
	A65_TOKEN_COMMAND_PHP,
	A65_TOKEN_COMMAND_PHX,
	A65_TOKEN_COMMAND_PHY,
	A65_TOKEN_COMMAND_PLA,
	A65_TOKEN_COMMAND_PLP,
	A65_TOKEN_COMMAND_PLX,
	A65_TOKEN_COMMAND_PLY,
	A65_TOKEN_COMMAND_RMB0,
	A65_TOKEN_COMMAND_RMB1,
	A65_TOKEN_COMMAND_RMB2,
	A65_TOKEN_COMMAND_RMB3,
	A65_TOKEN_COMMAND_RMB4,
	A65_TOKEN_COMMAND_RMB5,
	A65_TOKEN_COMMAND_RMB6,
	A65_TOKEN_COMMAND_RMB7,
	A65_TOKEN_COMMAND_ROL,
	A65_TOKEN_COMMAND_ROR,
	A65_TOKEN_COMMAND_RTI,
	A65_TOKEN_COMMAND_RTS,
	A65_TOKEN_COMMAND_SBC,
	A65_TOKEN_COMMAND_SEC,
	A65_TOKEN_COMMAND_SED,
	A65_TOKEN_COMMAND_SEI,
	A65_TOKEN_COMMAND_SMB0,
	A65_TOKEN_COMMAND_SMB1,
	A65_TOKEN_COMMAND_SMB2,
	A65_TOKEN_COMMAND_SMB3,
	A65_TOKEN_COMMAND_SMB4,
	A65_TOKEN_COMMAND_SMB5,
	A65_TOKEN_COMMAND_SMB6,
	A65_TOKEN_COMMAND_SMB7,
	A65_TOKEN_COMMAND_STA,
	A65_TOKEN_COMMAND_STP,
	A65_TOKEN_COMMAND_STX,
	A65_TOKEN_COMMAND_STY,
	A65_TOKEN_COMMAND_STZ,
	A65_TOKEN_COMMAND_TAX,
	A65_TOKEN_COMMAND_TAY,
	A65_TOKEN_COMMAND_TRB,
	A65_TOKEN_COMMAND_TSB,
	A65_TOKEN_COMMAND_TSX,
	A65_TOKEN_COMMAND_TXA,
	A65_TOKEN_COMMAND_TXS,
	A65_TOKEN_COMMAND_TYA,
	A65_TOKEN_COMMAND_WAI,
};

#define A65_TOKEN_COMMAND_MAX A65_TOKEN_COMMAND_WAI

static const std::string A65_TOKEN_COMMAND_STR[] = {
	"adc", "and", "asl", "bbr0", "bbr1", "bbr2", "bbr3", "bbr4", "bbr5", "bbr6", "bbr7",
	"bbs0", "bbs1", "bbs2", "bbs3", "bbs4", "bbs5", "bbs6", "bbs7", "bcc", "bcs", "beq",
	"bit", "bmi", "bne", "bpl", "bra", "brk", "bvc", "bvs", "clc", "cld", "cli", "clv",
	"cmd", "cmp", "cpx", "cpy", "dec", "dex", "dey", "eor", "inc", "inx", "iny", "jmp", "jsr",
	"lda", "ldx", "ldy", "lsr", "nop", "ora", "pha", "php", "phx", "phy", "pla", "plp", "plx", "ply",
	"rmb0", "rmb1", "rmb2", "rmb3", "rmb4", "rmb5", "rmb6", "rmb7", "rol", "ror", "rti", "rts",
	"sbc", "sec", "sed", "sei", "smb0", "smb1", "smb2", "smb3", "smb4", "smb5", "smb6", "smb7",
	"sta", "stp", "stx", "sty", "stz", "tax", "tay", "trb", "tsb", "tsx", "txa", "txs", "tya", "wai",
	};

#define A65_TOKEN_COMMAND_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_COMMAND_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_COMMAND_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_COMMAND_MAP = {
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_ADC), A65_TOKEN_COMMAND_ADC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_AND), A65_TOKEN_COMMAND_AND),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_ASL), A65_TOKEN_COMMAND_ASL),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR0), A65_TOKEN_COMMAND_BBR0),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR1), A65_TOKEN_COMMAND_BBR1),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR2), A65_TOKEN_COMMAND_BBR2),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR3), A65_TOKEN_COMMAND_BBR3),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR4), A65_TOKEN_COMMAND_BBR4),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR5), A65_TOKEN_COMMAND_BBR5),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR6), A65_TOKEN_COMMAND_BBR6),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBR7), A65_TOKEN_COMMAND_BBR7),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS0), A65_TOKEN_COMMAND_BBS0),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS1), A65_TOKEN_COMMAND_BBS1),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS2), A65_TOKEN_COMMAND_BBS2),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS3), A65_TOKEN_COMMAND_BBS3),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS4), A65_TOKEN_COMMAND_BBS4),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS5), A65_TOKEN_COMMAND_BBS5),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS6), A65_TOKEN_COMMAND_BBS6),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BBS7), A65_TOKEN_COMMAND_BBS7),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BCC), A65_TOKEN_COMMAND_BCC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BCS), A65_TOKEN_COMMAND_BCS),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BEQ), A65_TOKEN_COMMAND_BEQ),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BIT), A65_TOKEN_COMMAND_BIT),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BMI), A65_TOKEN_COMMAND_BMI),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BNE), A65_TOKEN_COMMAND_BNE),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BPL), A65_TOKEN_COMMAND_BPL),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BRA), A65_TOKEN_COMMAND_BRA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BRK), A65_TOKEN_COMMAND_BRK),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BVC), A65_TOKEN_COMMAND_BVC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_BVS), A65_TOKEN_COMMAND_BVS),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CLC), A65_TOKEN_COMMAND_CLC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CLD), A65_TOKEN_COMMAND_CLD),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CLI), A65_TOKEN_COMMAND_CLI),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CLV), A65_TOKEN_COMMAND_CLV),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CMD), A65_TOKEN_COMMAND_CMD),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CMP), A65_TOKEN_COMMAND_CMP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CPX), A65_TOKEN_COMMAND_CPX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_CPY), A65_TOKEN_COMMAND_CPY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_DEC), A65_TOKEN_COMMAND_DEC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_DEX), A65_TOKEN_COMMAND_DEX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_DEY), A65_TOKEN_COMMAND_DEY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_EOR), A65_TOKEN_COMMAND_EOR),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_INC), A65_TOKEN_COMMAND_INC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_INX), A65_TOKEN_COMMAND_INX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_INY), A65_TOKEN_COMMAND_INY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_JMP), A65_TOKEN_COMMAND_JMP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_JSR), A65_TOKEN_COMMAND_JSR),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_LDA), A65_TOKEN_COMMAND_LDA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_LDX), A65_TOKEN_COMMAND_LDX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_LDY), A65_TOKEN_COMMAND_LDY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_LSR), A65_TOKEN_COMMAND_LSR),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_NOP), A65_TOKEN_COMMAND_NOP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_ORA), A65_TOKEN_COMMAND_ORA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PHA), A65_TOKEN_COMMAND_PHA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PHP), A65_TOKEN_COMMAND_PHP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PHX), A65_TOKEN_COMMAND_PHX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PHY), A65_TOKEN_COMMAND_PHY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PLA), A65_TOKEN_COMMAND_PLA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PLP), A65_TOKEN_COMMAND_PLP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PLX), A65_TOKEN_COMMAND_PLX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_PLY), A65_TOKEN_COMMAND_PLY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB0), A65_TOKEN_COMMAND_RMB0),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB1), A65_TOKEN_COMMAND_RMB1),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB2), A65_TOKEN_COMMAND_RMB2),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB3), A65_TOKEN_COMMAND_RMB3),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB4), A65_TOKEN_COMMAND_RMB4),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB5), A65_TOKEN_COMMAND_RMB5),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB6), A65_TOKEN_COMMAND_RMB6),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RMB7), A65_TOKEN_COMMAND_RMB7),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_ROL), A65_TOKEN_COMMAND_ROL),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_ROR), A65_TOKEN_COMMAND_ROR),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RTI), A65_TOKEN_COMMAND_RTI),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_RTS), A65_TOKEN_COMMAND_RTS),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SBC), A65_TOKEN_COMMAND_SBC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SEC), A65_TOKEN_COMMAND_SEC),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SED), A65_TOKEN_COMMAND_SED),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SEI), A65_TOKEN_COMMAND_SEI),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB0), A65_TOKEN_COMMAND_SMB0),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB1), A65_TOKEN_COMMAND_SMB1),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB2), A65_TOKEN_COMMAND_SMB2),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB3), A65_TOKEN_COMMAND_SMB3),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB4), A65_TOKEN_COMMAND_SMB4),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB5), A65_TOKEN_COMMAND_SMB5),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB6), A65_TOKEN_COMMAND_SMB6),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_SMB7), A65_TOKEN_COMMAND_SMB7),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_STA), A65_TOKEN_COMMAND_STA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_STP), A65_TOKEN_COMMAND_STP),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_STX), A65_TOKEN_COMMAND_STX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_STY), A65_TOKEN_COMMAND_STY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_STZ), A65_TOKEN_COMMAND_STZ),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TAX), A65_TOKEN_COMMAND_TAX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TAY), A65_TOKEN_COMMAND_TAY),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TRB), A65_TOKEN_COMMAND_TRB),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TSB), A65_TOKEN_COMMAND_TSB),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TSX), A65_TOKEN_COMMAND_TSX),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TXA), A65_TOKEN_COMMAND_TXA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TXS), A65_TOKEN_COMMAND_TXS),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_TYA), A65_TOKEN_COMMAND_TYA),
	std::make_pair(A65_TOKEN_COMMAND_STRING(A65_TOKEN_COMMAND_WAI), A65_TOKEN_COMMAND_WAI),
	};

#define A65_TOKEN_COMMAND_ID(_STRING_) \
	A65_TOKEN_COMMAND_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_COMMAND(_STRING_) \
	(A65_TOKEN_COMMAND_MAP.find(_STRING_) != A65_TOKEN_COMMAND_MAP.end())

enum {
	A65_TOKEN_COMMAND_MODE_ABSOLUTE = 0,
	A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_INDIRECT,
	A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_X,
	A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_Y,
	A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDIRECT,
	A65_TOKEN_COMMAND_MODE_ACCUMULATOR,
	A65_TOKEN_COMMAND_MODE_IMMEDIATE,
	A65_TOKEN_COMMAND_MODE_IMPLIED,
	A65_TOKEN_COMMAND_MODE_RELATIVE,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_INDIRECT,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_X,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_Y,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT,
	A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT_INDEX,
};

#define A65_TOKEN_COMMAND_MODE_MAX A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT_INDEX

static const std::string A65_TOKEN_COMMAND_MODE_STR[] = {
	"abs", "[abs, x]", "abs, x", "abs, y", "[abs]", "acc", "imm", "imp", "rel", "zp", "[zp, x]",
	"zp, x", "zp, y", "[zp]", "[zp], y",
	};

#define A65_TOKEN_COMMAND_MODE_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_COMMAND_MODE_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_COMMAND_MODE_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_COMMAND_MODE_MAP = {
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ABSOLUTE), A65_TOKEN_COMMAND_MODE_ABSOLUTE),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_INDIRECT), A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_INDIRECT),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_X), A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_X),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_Y), A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDEX_Y),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDIRECT), A65_TOKEN_COMMAND_MODE_ABSOLUTE_INDIRECT),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ACCUMULATOR), A65_TOKEN_COMMAND_MODE_ACCUMULATOR),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_IMMEDIATE), A65_TOKEN_COMMAND_MODE_IMMEDIATE),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_IMPLIED), A65_TOKEN_COMMAND_MODE_IMPLIED),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_RELATIVE), A65_TOKEN_COMMAND_MODE_RELATIVE),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE), A65_TOKEN_COMMAND_MODE_ZEROPAGE),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_INDIRECT), A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_INDIRECT),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_X), A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_X),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_Y), A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDEX_Y),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT), A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT),
	std::make_pair(A65_TOKEN_COMMAND_MODE_STRING(A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT_INDEX), A65_TOKEN_COMMAND_MODE_ZEROPAGE_INDIRECT_INDEX),
	};

#define A65_TOKEN_COMMAND_MODE_ID(_STRING_) \
	A65_TOKEN_COMMAND_MODE_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_COMMAND_MODE(_STRING_) \
	(A65_TOKEN_COMMAND_MODE_MAP.find(_STRING_) != A65_TOKEN_COMMAND_MODE_MAP.end())

static const std::set<int> A65_TOKEN_COMMAND_ABSOLUTE_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_ASL, A65_TOKEN_COMMAND_BIT,
	A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_CPX, A65_TOKEN_COMMAND_CPY, A65_TOKEN_COMMAND_DEC,
	A65_TOKEN_COMMAND_EOR, A65_TOKEN_COMMAND_INC, A65_TOKEN_COMMAND_JMP, A65_TOKEN_COMMAND_JSR,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_LDX, A65_TOKEN_COMMAND_LDY, A65_TOKEN_COMMAND_LSR,
	A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_ROL, A65_TOKEN_COMMAND_ROR, A65_TOKEN_COMMAND_SBC,
	A65_TOKEN_COMMAND_STA, A65_TOKEN_COMMAND_STX, A65_TOKEN_COMMAND_STY, A65_TOKEN_COMMAND_STZ,
	A65_TOKEN_COMMAND_TRB, A65_TOKEN_COMMAND_TSB,
	};

#define A65_IS_TOKEN_COMMAND_ABSOLUTE(_TYPE_) \
	(A65_TOKEN_COMMAND_ABSOLUTE_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ABSOLUTE_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ABSOLUTE_INDEX_INDIRECT_SET = {
	A65_TOKEN_COMMAND_JMP,
	};

#define A65_IS_TOKEN_COMMAND_ABSOLUTE_INDEX_INDIRECT(_TYPE_) \
	(A65_TOKEN_COMMAND_ABSOLUTE_INDEX_INDIRECT_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ABSOLUTE_INDEX_INDIRECT_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ABSOLUTE_INDEX_X_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_ASL, A65_TOKEN_COMMAND_BIT,
	A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_DEC, A65_TOKEN_COMMAND_EOR, A65_TOKEN_COMMAND_INC,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_LDY, A65_TOKEN_COMMAND_LSR, A65_TOKEN_COMMAND_ORA,
	A65_TOKEN_COMMAND_ROL, A65_TOKEN_COMMAND_ROR, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_STA,
	A65_TOKEN_COMMAND_STZ,
	};

#define A65_IS_TOKEN_COMMAND_ABSOLUTE_INDEX_X(_TYPE_) \
	(A65_TOKEN_COMMAND_ABSOLUTE_INDEX_X_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ABSOLUTE_INDEX_X_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ABSOLUTE_INDEX_Y_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_EOR,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_LDX, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_SBC,
	A65_TOKEN_COMMAND_STA,
	};

#define A65_IS_TOKEN_COMMAND_ABSOLUTE_INDEX_Y(_TYPE_) \
	(A65_TOKEN_COMMAND_ABSOLUTE_INDEX_Y_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ABSOLUTE_INDEX_Y_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ABSOLUTE_INDIRECT_SET = {
	A65_TOKEN_COMMAND_JMP,
	};

#define A65_IS_TOKEN_COMMAND_ABSOLUTE_INDIRECT(_TYPE_) \
	(A65_TOKEN_COMMAND_ABSOLUTE_INDIRECT_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ABSOLUTE_INDIRECT_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ACCUMULATOR_SET = {
	A65_TOKEN_COMMAND_ASL, A65_TOKEN_COMMAND_DEC, A65_TOKEN_COMMAND_INC, A65_TOKEN_COMMAND_LSR,
	A65_TOKEN_COMMAND_ROL, A65_TOKEN_COMMAND_ROR,
	};

#define A65_IS_TOKEN_COMMAND_ACCUMULATOR(_TYPE_) \
	(A65_TOKEN_COMMAND_ACCUMULATOR_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ACCUMULATOR_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_IMMEDIATE_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_BIT, A65_TOKEN_COMMAND_CMP,
	A65_TOKEN_COMMAND_CPX, A65_TOKEN_COMMAND_CPY, A65_TOKEN_COMMAND_EOR, A65_TOKEN_COMMAND_LDA,
	A65_TOKEN_COMMAND_LDX, A65_TOKEN_COMMAND_LDY, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_SBC,
	};

#define A65_IS_TOKEN_COMMAND_IMMEDIATE(_TYPE_) \
	(A65_TOKEN_COMMAND_IMMEDIATE_SET.find(_TYPE_) != A65_TOKEN_COMMAND_IMMEDIATE_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_IMPLIED_SET = {
	A65_TOKEN_COMMAND_BRK, A65_TOKEN_COMMAND_CLC, A65_TOKEN_COMMAND_CLD, A65_TOKEN_COMMAND_CLI,
	A65_TOKEN_COMMAND_CLV, A65_TOKEN_COMMAND_DEX, A65_TOKEN_COMMAND_DEY, A65_TOKEN_COMMAND_INX,
	A65_TOKEN_COMMAND_INY, A65_TOKEN_COMMAND_NOP, A65_TOKEN_COMMAND_PHA, A65_TOKEN_COMMAND_PHP,
	A65_TOKEN_COMMAND_PHX, A65_TOKEN_COMMAND_PHY, A65_TOKEN_COMMAND_PLA, A65_TOKEN_COMMAND_PLP,
	A65_TOKEN_COMMAND_PLX, A65_TOKEN_COMMAND_PLY, A65_TOKEN_COMMAND_RTI, A65_TOKEN_COMMAND_RTS,
	A65_TOKEN_COMMAND_SEC, A65_TOKEN_COMMAND_SED, A65_TOKEN_COMMAND_SEI, A65_TOKEN_COMMAND_STP,
	A65_TOKEN_COMMAND_TAX, A65_TOKEN_COMMAND_TAY, A65_TOKEN_COMMAND_TSX, A65_TOKEN_COMMAND_TXA,
	A65_TOKEN_COMMAND_TXS, A65_TOKEN_COMMAND_TYA, A65_TOKEN_COMMAND_WAI,
	};

#define A65_IS_TOKEN_COMMAND_IMPLIED(_TYPE_) \
	(A65_TOKEN_COMMAND_IMPLIED_SET.find(_TYPE_) != A65_TOKEN_COMMAND_IMPLIED_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_RELATIVE_SET = {
	A65_TOKEN_COMMAND_BBR0, A65_TOKEN_COMMAND_BBR1, A65_TOKEN_COMMAND_BBR2, A65_TOKEN_COMMAND_BBR3,
	A65_TOKEN_COMMAND_BBR4, A65_TOKEN_COMMAND_BBR5, A65_TOKEN_COMMAND_BBR6, A65_TOKEN_COMMAND_BBR7,
	A65_TOKEN_COMMAND_BBS0, A65_TOKEN_COMMAND_BBS1, A65_TOKEN_COMMAND_BBS2, A65_TOKEN_COMMAND_BBS3,
	A65_TOKEN_COMMAND_BBS4, A65_TOKEN_COMMAND_BBS5, A65_TOKEN_COMMAND_BBS6, A65_TOKEN_COMMAND_BBS7,
	A65_TOKEN_COMMAND_BCC, A65_TOKEN_COMMAND_BCS, A65_TOKEN_COMMAND_BEQ, A65_TOKEN_COMMAND_BMI,
	A65_TOKEN_COMMAND_BNE, A65_TOKEN_COMMAND_BPL, A65_TOKEN_COMMAND_BRA, A65_TOKEN_COMMAND_BVC,
	A65_TOKEN_COMMAND_BVS,
	};

#define A65_IS_TOKEN_COMMAND_RELATIVE(_TYPE_) \
	(A65_TOKEN_COMMAND_RELATIVE_SET.find(_TYPE_) != A65_TOKEN_COMMAND_RELATIVE_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_ASL, A65_TOKEN_COMMAND_BIT,
	A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_CPX, A65_TOKEN_COMMAND_CPY, A65_TOKEN_COMMAND_DEC,
	A65_TOKEN_COMMAND_EOR, A65_TOKEN_COMMAND_INC, A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_LDX,
	A65_TOKEN_COMMAND_LDY, A65_TOKEN_COMMAND_LSR, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_RMB0,
	A65_TOKEN_COMMAND_RMB1, A65_TOKEN_COMMAND_RMB2, A65_TOKEN_COMMAND_RMB3, A65_TOKEN_COMMAND_RMB4,
	A65_TOKEN_COMMAND_RMB5, A65_TOKEN_COMMAND_RMB6, A65_TOKEN_COMMAND_RMB7, A65_TOKEN_COMMAND_ROL,
	A65_TOKEN_COMMAND_ROR, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_SMB0, A65_TOKEN_COMMAND_SMB1,
	A65_TOKEN_COMMAND_SMB2, A65_TOKEN_COMMAND_SMB3, A65_TOKEN_COMMAND_SMB4, A65_TOKEN_COMMAND_SMB5,
	A65_TOKEN_COMMAND_SMB6, A65_TOKEN_COMMAND_SMB7, A65_TOKEN_COMMAND_STA, A65_TOKEN_COMMAND_STX,
	A65_TOKEN_COMMAND_STY, A65_TOKEN_COMMAND_STZ, A65_TOKEN_COMMAND_TRB, A65_TOKEN_COMMAND_TSB,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_INDEX_INDIRECT_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_EOR,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_STA,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE_INDEX_INDIRECT(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_INDEX_INDIRECT_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_INDEX_INDIRECT_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_INDEX_X_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_ASL, A65_TOKEN_COMMAND_BIT,
	A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_DEC, A65_TOKEN_COMMAND_EOR, A65_TOKEN_COMMAND_INC,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_LDY, A65_TOKEN_COMMAND_LSR, A65_TOKEN_COMMAND_ORA,
	A65_TOKEN_COMMAND_ROL, A65_TOKEN_COMMAND_ROR, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_STA,
	A65_TOKEN_COMMAND_STY, A65_TOKEN_COMMAND_STZ,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE_INDEX_X(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_INDEX_X_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_INDEX_X_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_INDEX_Y_SET = {
	A65_TOKEN_COMMAND_LDX, A65_TOKEN_COMMAND_STX,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE_INDEX_Y(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_INDEX_Y_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_INDEX_Y_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_EOR,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_STA,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE_INDIRECT(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_SET.end())

static const std::set<int> A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_INDEX_SET = {
	A65_TOKEN_COMMAND_ADC, A65_TOKEN_COMMAND_AND, A65_TOKEN_COMMAND_CMP, A65_TOKEN_COMMAND_EOR,
	A65_TOKEN_COMMAND_LDA, A65_TOKEN_COMMAND_ORA, A65_TOKEN_COMMAND_SBC, A65_TOKEN_COMMAND_STA,
	};

#define A65_IS_TOKEN_COMMAND_ZEROPAGE_INDIRECT_INDEX(_TYPE_) \
	(A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_INDEX_SET.find(_TYPE_) != A65_TOKEN_COMMAND_ZEROPAGE_INDIRECT_INDEX_SET.end())

enum {
	A65_TOKEN_CONSTANT_FALSE = 0,
	A65_TOKEN_CONSTANT_NULL,
	A65_TOKEN_CONSTANT_TRUE,
};

#define A65_TOKEN_CONSTANT_MAX A65_TOKEN_CONSTANT_TRUE

static const std::string A65_TOKEN_CONSTANT_STR[] = {
	"false", "null", "true",
	};

#define A65_TOKEN_CONSTANT_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_CONSTANT_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_CONSTANT_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_CONSTANT_MAP = {
	std::make_pair(A65_TOKEN_CONSTANT_STRING(A65_TOKEN_CONSTANT_FALSE), A65_TOKEN_CONSTANT_FALSE),
	std::make_pair(A65_TOKEN_CONSTANT_STRING(A65_TOKEN_CONSTANT_NULL), A65_TOKEN_CONSTANT_NULL),
	std::make_pair(A65_TOKEN_CONSTANT_STRING(A65_TOKEN_CONSTANT_TRUE), A65_TOKEN_CONSTANT_TRUE),
	};

#define A65_TOKEN_CONSTANT_ID(_STRING_) \
	A65_TOKEN_CONSTANT_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_CONSTANT(_STRING_) \
	(A65_TOKEN_CONSTANT_MAP.find(_STRING_) != A65_TOKEN_CONSTANT_MAP.end())

enum {
	A65_TOKEN_DIRECTIVE_DATA_BYTE = 0,
	A65_TOKEN_DIRECTIVE_DATA_WORD,
	A65_TOKEN_DIRECTIVE_DEFINE,
	A65_TOKEN_DIRECTIVE_ELSE,
	A65_TOKEN_DIRECTIVE_ELSE_IF,
	A65_TOKEN_DIRECTIVE_END,
	A65_TOKEN_DIRECTIVE_EXPORT,
	A65_TOKEN_DIRECTIVE_IF,
	A65_TOKEN_DIRECTIVE_IF_DEFINE,
	A65_TOKEN_DIRECTIVE_IF_DEFINE_NOT,
	A65_TOKEN_DIRECTIVE_ORIGIN,
	A65_TOKEN_DIRECTIVE_RESERVE,
	A65_TOKEN_DIRECTIVE_UNDEFINE,
};

#define A65_TOKEN_DIRECTIVE_MAX A65_TOKEN_DIRECTIVE_UNDEFINE

static const std::string A65_TOKEN_DIRECTIVE_STR[] = {
	".db", ".dw", ".def", ".else", ".elseif", ".endif", ".exp", ".if", ".ifdef", ".ifndef", ".org", ".res", ".undef",
	};

#define A65_TOKEN_DIRECTIVE_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_DIRECTIVE_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_DIRECTIVE_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_DIRECTIVE_MAP = {
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_DATA_BYTE), A65_TOKEN_DIRECTIVE_DATA_BYTE),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_DATA_WORD), A65_TOKEN_DIRECTIVE_DATA_WORD),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_DEFINE), A65_TOKEN_DIRECTIVE_DEFINE),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_ELSE), A65_TOKEN_DIRECTIVE_ELSE),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_ELSE_IF), A65_TOKEN_DIRECTIVE_ELSE_IF),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_END), A65_TOKEN_DIRECTIVE_END),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_EXPORT), A65_TOKEN_DIRECTIVE_EXPORT),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_IF), A65_TOKEN_DIRECTIVE_IF),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_IF_DEFINE), A65_TOKEN_DIRECTIVE_IF_DEFINE),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_IF_DEFINE_NOT), A65_TOKEN_DIRECTIVE_IF_DEFINE_NOT),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_ORIGIN), A65_TOKEN_DIRECTIVE_ORIGIN),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_RESERVE), A65_TOKEN_DIRECTIVE_RESERVE),
	std::make_pair(A65_TOKEN_DIRECTIVE_STRING(A65_TOKEN_DIRECTIVE_UNDEFINE), A65_TOKEN_DIRECTIVE_UNDEFINE),
	};

#define A65_TOKEN_DIRECTIVE_ID(_STRING_) \
	A65_TOKEN_DIRECTIVE_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_DIRECTIVE(_STRING_) \
	(A65_TOKEN_DIRECTIVE_MAP.find(_STRING_) != A65_TOKEN_DIRECTIVE_MAP.end())

enum {
	A65_TOKEN_MACRO_HIGH = 0,
	A65_TOKEN_MACRO_LOW,
};

#define A65_TOKEN_MACRO_MAX A65_TOKEN_MACRO_LOW

static const std::string A65_TOKEN_MACRO_STR[] = {
	"high", "low",
	};

#define A65_TOKEN_MACRO_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_MACRO_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_MACRO_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_MACRO_MAP = {
	std::make_pair(A65_TOKEN_MACRO_STRING(A65_TOKEN_MACRO_HIGH), A65_TOKEN_MACRO_HIGH),
	std::make_pair(A65_TOKEN_MACRO_STRING(A65_TOKEN_MACRO_LOW), A65_TOKEN_MACRO_LOW),
	};

#define A65_TOKEN_MACRO_ID(_STRING_) \
	A65_TOKEN_MACRO_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_MACRO(_STRING_) \
	(A65_TOKEN_MACRO_MAP.find(_STRING_) != A65_TOKEN_MACRO_MAP.end())

enum {
	A65_TOKEN_PRAGMA_INCLUDE_BINARY = 0,
	A65_TOKEN_PRAGMA_INCLUDE_SOURCE,
	A65_TOKEN_PRAGMA_METADATA,
};

#define A65_TOKEN_PRAGMA_MAX A65_TOKEN_PRAGMA_METADATA

static const std::string A65_TOKEN_PRAGMA_STR[] = {
	"@incb", "@inc", "@meta",
	};

#define A65_TOKEN_PRAGMA_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_PRAGMA_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_PRAGMA_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_PRAGMA_MAP = {
	std::make_pair(A65_TOKEN_PRAGMA_STRING(A65_TOKEN_PRAGMA_INCLUDE_BINARY), A65_TOKEN_PRAGMA_INCLUDE_BINARY),
	std::make_pair(A65_TOKEN_PRAGMA_STRING(A65_TOKEN_PRAGMA_INCLUDE_SOURCE), A65_TOKEN_PRAGMA_INCLUDE_SOURCE),
	std::make_pair(A65_TOKEN_PRAGMA_STRING(A65_TOKEN_PRAGMA_METADATA), A65_TOKEN_PRAGMA_METADATA),
	};

#define A65_TOKEN_PRAGMA_ID(_STRING_) \
	A65_TOKEN_PRAGMA_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_PRAGMA(_STRING_) \
	(A65_TOKEN_PRAGMA_MAP.find(_STRING_) != A65_TOKEN_PRAGMA_MAP.end())

enum {
	A65_TOKEN_REGISTER_ACCUMULATOR = 0,
	A65_TOKEN_REGISTER_INDEX_X,
	A65_TOKEN_REGISTER_INDEX_Y,
};

#define A65_TOKEN_REGISTER_MAX A65_TOKEN_REGISTER_INDEX_Y

static const std::string A65_TOKEN_REGISTER_STR[] = {
	"a", "x", "y",
	};

#define A65_TOKEN_REGISTER_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_REGISTER_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_REGISTER_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_REGISTER_MAP = {
	std::make_pair(A65_TOKEN_REGISTER_STRING(A65_TOKEN_REGISTER_ACCUMULATOR), A65_TOKEN_REGISTER_ACCUMULATOR),
	std::make_pair(A65_TOKEN_REGISTER_STRING(A65_TOKEN_REGISTER_INDEX_X), A65_TOKEN_REGISTER_INDEX_X),
	std::make_pair(A65_TOKEN_REGISTER_STRING(A65_TOKEN_REGISTER_INDEX_Y), A65_TOKEN_REGISTER_INDEX_Y),
	};

#define A65_TOKEN_REGISTER_ID(_STRING_) \
	A65_TOKEN_REGISTER_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_REGISTER(_STRING_) \
	(A65_TOKEN_REGISTER_MAP.find(_STRING_) != A65_TOKEN_REGISTER_MAP.end())

enum {
	A65_TOKEN_SYMBOL_ARITHMETIC_ADDITION,
	A65_TOKEN_SYMBOL_ARITHMETIC_DIVIDE,
	A65_TOKEN_SYMBOL_ARITHMETIC_MODULUS,
	A65_TOKEN_SYMBOL_ARITHMETIC_MULTIPLY,
	A65_TOKEN_SYMBOL_ARITHMETIC_SUBTRACTION,
	A65_TOKEN_SYMBOL_BINARY_AND,
	A65_TOKEN_SYMBOL_BINARY_OR,
	A65_TOKEN_SYMBOL_BINARY_XOR,
	A65_TOKEN_SYMBOL_BRACE_CURLY_CLOSE,
	A65_TOKEN_SYMBOL_BRACE_CURLY_OPEN,
	A65_TOKEN_SYMBOL_BRACE_SQUARE_CLOSE,
	A65_TOKEN_SYMBOL_BRACE_SQUARE_OPEN,
	A65_TOKEN_SYMBOL_IMMEDIATE,
	A65_TOKEN_SYMBOL_LOGICAL_AND,
	A65_TOKEN_SYMBOL_LOGICAL_OR,
	A65_TOKEN_SYMBOL_LOGICAL_SHIFT_LEFT,
	A65_TOKEN_SYMBOL_LOGICAL_SHIFT_RIGHT,
	A65_TOKEN_SYMBOL_OPERATOR_EQUALS,
	A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN,
	A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN_EQUALS,
	A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN,
	A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN_EQUALS,
	A65_TOKEN_SYMBOL_OPERATOR_NOT_EQUALS,
	A65_TOKEN_SYMBOL_PARENTHESIS_CLOSE,
	A65_TOKEN_SYMBOL_PARENTHESIS_OPEN,
	A65_TOKEN_SYMBOL_SEPERATOR,
	A65_TOKEN_SYMBOL_UNARY_NEGATION,
	A65_TOKEN_SYMBOL_UNARY_NOT,
};

#define A65_TOKEN_SYMBOL_MAX A65_TOKEN_SYMBOL_UNARY_NOT

static const std::string A65_TOKEN_SYMBOL_STR[] = {
	"+", "/", "%", "*", "-", "&", "|", "^", "}", "{", "]", "[", "#", "&&", "||", "<<", ">>",
	"==", ">", ">=", "<", "<=", "!=", ")", "(", ",", "~", "!",
	};

#define A65_TOKEN_SYMBOL_STRING(_TYPE_) \
	(((_TYPE_) > A65_TOKEN_SYMBOL_MAX) ? A65_STRING_UNKNOWN : \
		A65_STRING_CHECK(A65_TOKEN_SYMBOL_STR[_TYPE_]))

static const std::map<std::string, int> A65_TOKEN_SYMBOL_MAP = {
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_ARITHMETIC_ADDITION), A65_TOKEN_SYMBOL_ARITHMETIC_ADDITION),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_ARITHMETIC_DIVIDE), A65_TOKEN_SYMBOL_ARITHMETIC_DIVIDE),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_ARITHMETIC_MODULUS), A65_TOKEN_SYMBOL_ARITHMETIC_MODULUS),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_ARITHMETIC_MULTIPLY), A65_TOKEN_SYMBOL_ARITHMETIC_MULTIPLY),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_ARITHMETIC_SUBTRACTION), A65_TOKEN_SYMBOL_ARITHMETIC_SUBTRACTION),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BINARY_AND), A65_TOKEN_SYMBOL_BINARY_AND),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BINARY_OR), A65_TOKEN_SYMBOL_BINARY_OR),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BINARY_XOR), A65_TOKEN_SYMBOL_BINARY_XOR),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BRACE_CURLY_CLOSE), A65_TOKEN_SYMBOL_BRACE_CURLY_CLOSE),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BRACE_CURLY_OPEN), A65_TOKEN_SYMBOL_BRACE_CURLY_OPEN),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BRACE_SQUARE_CLOSE), A65_TOKEN_SYMBOL_BRACE_SQUARE_CLOSE),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_BRACE_SQUARE_OPEN), A65_TOKEN_SYMBOL_BRACE_SQUARE_OPEN),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_IMMEDIATE), A65_TOKEN_SYMBOL_IMMEDIATE),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_LOGICAL_AND), A65_TOKEN_SYMBOL_LOGICAL_AND),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_LOGICAL_OR), A65_TOKEN_SYMBOL_LOGICAL_OR),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_LOGICAL_SHIFT_LEFT), A65_TOKEN_SYMBOL_LOGICAL_SHIFT_LEFT),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_LOGICAL_SHIFT_RIGHT), A65_TOKEN_SYMBOL_LOGICAL_SHIFT_RIGHT),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_EQUALS), A65_TOKEN_SYMBOL_OPERATOR_EQUALS),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN), A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN_EQUALS), A65_TOKEN_SYMBOL_OPERATOR_GREATER_THAN_EQUALS),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN), A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN_EQUALS), A65_TOKEN_SYMBOL_OPERATOR_LESS_THAN_EQUALS),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_OPERATOR_NOT_EQUALS), A65_TOKEN_SYMBOL_OPERATOR_NOT_EQUALS),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_PARENTHESIS_CLOSE), A65_TOKEN_SYMBOL_PARENTHESIS_CLOSE),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_PARENTHESIS_OPEN), A65_TOKEN_SYMBOL_PARENTHESIS_OPEN),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_SEPERATOR), A65_TOKEN_SYMBOL_SEPERATOR),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_UNARY_NEGATION), A65_TOKEN_SYMBOL_UNARY_NEGATION),
	std::make_pair(A65_TOKEN_SYMBOL_STRING(A65_TOKEN_SYMBOL_UNARY_NOT), A65_TOKEN_SYMBOL_UNARY_NOT),
	};

#define A65_TOKEN_SYMBOL_ID(_STRING_) \
	A65_TOKEN_SYMBOL_MAP.find(_STRING_)->second

#define A65_IS_TOKEN_SYMBOL(_STRING_) \
	(A65_TOKEN_SYMBOL_MAP.find(_STRING_) != A65_TOKEN_SYMBOL_MAP.end())

#endif // A65_TOKEN_TYPE_H_
